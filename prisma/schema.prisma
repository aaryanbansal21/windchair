// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

// prisma/schema.prisma

datasource db {
    provider  = "postgresql"
    url       = env("PRISMA_DATABASE_URL") // For Prisma Accelerate
    directUrl = env("POSTGRES_URL")      // For migrations
}

model Post {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}


// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    bases         Base[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Base {
    id        String   @id @default(cuid())
    name      String
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    tables Table[]

    @@index([userId])
}

model Table {
    id        String   @id @default(cuid())
    name      String
    baseId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    base    Base     @relation(fields: [baseId], references: [id], onDelete: Cascade)
    columns Column[]
    rows    Row[]
    views   View[]

    @@index([baseId])
}

model Column {
    id        String   @id @default(cuid())
    name      String
    type      String   // "text" or "number"
    tableId   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    table Table @relation(fields: [tableId], references: [id], onDelete: Cascade)

    @@index([tableId])
}

model Row {
    id        String   @id @default(cuid())
    tableId   String
    data      Json     // Store individual row data as JSON
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    table Table @relation(fields: [tableId], references: [id], onDelete: Cascade)

    @@index([tableId])
}

model View {
    id          String   @id @default(cuid())
    name        String
    tableId     String
    filters     Json?    // Store filters as JSON
    sorting     Json?    // Store sorting as JSON
    hiddenColumns Json?  // Store hidden column IDs as JSON array
    searchQuery String?  // Store search query
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    table Table @relation(fields: [tableId], references: [id], onDelete: Cascade)

    @@index([tableId])
}
